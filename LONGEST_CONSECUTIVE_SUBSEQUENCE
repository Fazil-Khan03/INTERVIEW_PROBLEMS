
/*
Given an array arr[] of positive integers. Find the length of the longest sub-sequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order.

Input:
The first line of input contains T, number of test cases. First line of line each test case contains a single integer N.
Next line contains N integer array.

Output:
Print the output of each test case in a seprate line.

Constraints:
1 <= T <= 100
1 <= N <= 105
0 <= a[i] <= 105

Example:
Input:
2
7
2 6 1 9 4 5 3
7
1 9 3 10 4 20 2

Output:
6
4

*/


// OPTIMUS PRIME
#include<bits/stdc++.h>


using namespace std;


int main()
{
int T;
cin>>T;

while(T--)
{
	int N;
	cin>>N;
	
	int arr[100000];
	for(int i=0;i<N;i++) cin>>arr[i];
	
	
	sort(arr,arr+N);
	
	
	set<int> st;
	
	int maxsize = 1;
	
	for(int i=0;i<N;i++)
	{
		if(st.size()==0)
		  {
		  	st.insert(arr[i]);
			  continue;		  	
		  }
		
	else if(st.find(arr[i]-1)!=st.end())
		 {
		 	st.insert(arr[i]);
		 	
		 	if(st.size()>maxsize)
		 	   maxsize = st.size();
		 	
		 	
		 }
		else
		{
		   st.clear(); 
		   st.insert(arr[i]);   
		}
		
		
	}
	


cout<<maxsize<<endl;
}

	return 0;
}
