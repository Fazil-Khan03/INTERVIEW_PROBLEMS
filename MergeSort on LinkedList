
/* Given Pointer/Reference to the head of the linked list, the task is to Sort the given linked list using Merge Sort.
Note: If the length of linked list is odd, then the extra node should go in the first list while splitting.

Example 1:

Input:
N = 5
value[]  = {3,5,2,4,1}
Output: 1 2 3 4 5
Explanation: After sorting the given
linked list, the resultant matrix
will be 1->2->3->4->5.
Example 2:

Input:
N = 3
value[]  = {9,15,0}
Output: 0 9 15
Explanation: After sorting the given
linked list , resultant will be
0->9->15.
Your Task:
For C++ and Python: The task is to complete the function mergeSort() which sort the linked list using merge sort function.
For Java: The task is to complete the function mergeSort() and return the node which can be used to print the sorted linked list.

Expected Time Complexity: O(N*Log(N))
Expected Auxiliary Space: O(N)

Constraints:
1 <= T <= 100
1 <= N <= 105
*/



Node *getMid(Node *start,Node* tail)
{
    
    Node *slow = start;
    Node *fast = start;
    
    while(fast!=tail && fast->next!=tail)
      {
            
            slow = slow->next;
            fast = fast->next->next;
            
          
      }
    
    return slow;
    
    
}

Node *merge(Node *a,Node *b)
{
    
    Node *result = new Node(999999);
    Node *tail  = result;
    
    
    while(a!=NULL && b!=NULL)
    {
        
        if(a->data <= b->data)
        {
            tail->next = a;
            tail = tail->next;
            a = a->next;
            
             
            
        }
        else
         {
             tail->next = b;
             tail = tail->next;
             b = b->next;
             
             
             
         }
        
    
        
    }
    
    
    while(a!=NULL)
    {
        
          tail->next = a;
          a = a->next;
          tail = tail->next;
          
        
    }
    
     while(b!=NULL)
    {
         
          tail->next = b;
          b = b->next;
          
          tail = tail->next;
        
        
    }
    
   
   
   return result->next; 
    
}

Node* util(Node *head, Node *tail)
{
    
    
    if(head==tail)
    {
          Node *temp = new Node(head->data);
          return temp;
          
        
        
        
    }
    
    Node* mid = getMid(head,tail);
    
    Node *left = util(head,mid);
    Node *right = util(mid->next,tail);
    
    
    return merge(left,right);
    
    
    
    
}

Node* mergeSort(Node* head) {
   
   
   Node *tail =head;
   
   while(tail->next!=NULL)
      tail = tail->next;
   
   return util(head, tail);
   
   
   
}

