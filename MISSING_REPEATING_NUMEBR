/*

Given an unsorted array Arr of size N of positive integers. One number 'A' from set {1, 2, …N} is missing and one number 'B' occurs twice in array. Find these two numbers.

Example 1:

Input:
N = 2
Arr[] = {2, 2}
Output: 2 1
Explanation: Repeating number is 2 and 
smallest positive missing number is 1.

Example 2:

Input:
N = 3
Arr[] = {1, 3, 3}
Output: 3 2
Explanation: Repeating number is 3 and 
smallest positive missing number is 2.

Your Task:
You don't need to read input or print anything. Your task is to complete the function findTwoElement() which takes the array of integers arr and n as parameters and returns an array of integers of size 2 denoting the answer ( The first index contains B and second index contains A.)

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N ≤ 105
1 ≤ Arr[i] ≤ N


*/



 int setbit(int n)
  {
      for(int i=0;i<32;i++)
       {
           if(n & (1<<i))
               return i; 
         
       }
    return 0;  
  }
  
    int *findTwoElement(int *arr, int n) {

     int *res = new int[2];
     
     
     int x=0;
     
     for(int i=0;i<n;i++) 
         x  = x ^ arr[i];
    
     int num = x;
     
     for(int i=1;i<=n;i++)
         num = num ^ i;
  
  int setb = setbit(num);
  
  int x1=0,y1=0;
  
 for(int i=0;i<n;i++)
  {
       
    if( (arr[i] & 1<<setb))
       x1 = x1 ^ arr[i];
    else
       y1 = y1 ^ arr[i];
    
  }
      
 for(int i=1;i<=n;i++)
  {
       
    if( (i & 1<<setb))
        x1 = x1 ^ i;
    else
       y1 = y1 ^ i;
  
      
  }
 
 bool flag = 0;
 
  for(int i=0;i<n;i++)
   {
       
       if(x1==arr[i])
          {
              res[0] = x1;
              res[1] = y1;
              return res;
              
              
          }
       
   }
 
 res[0] =y1;
 res[1] = x1;

     return res;
   
    }
