#include<bits/stdc++.h>

using namespace std;

	vector<int> nearest_smallest_right_index(long long int arr[],int N)
	{
	
	      stack<int> st;
		
		vector<int> right;
		
		for(int i=N-1;i>=0;i--)
		 {
		 	
		 	if(st.size()==0)
		 	   right.push_back(N);
		 	else if(st.size()>0 && arr[st.top()]<arr[i])
			   right.push_back(st.top());
			else if(st.size()>0 && arr[st.top()]>=arr[i])
			  {
			  	while(st.size()> 0 && arr[st.top()]>=arr[i])
			  	   st.pop();
			
			   if(st.size()==0)
			      right.push_back(N);
			    else
				  right.push_back(st.top());
				    
			  	
			 }       
		    	   
		 	st.push(i);
		 	
		 }
	
	
	reverse(right.begin(),right.end());
	
	return right;
	
}



vector<int> Nearest_smallest_index_left(long long int arr[],int N)
	{
	
		stack<int> st;
		
		vector<int> left;
		
		for(int i=0;i<N;i++)
		 {
		 	
		 	if(st.size()==0)
		 	   left.push_back(-1);
		 	else if(st.size()>0 && arr[st.top()]<arr[i])
			   left.push_back(st.top());
			else if(st.size()>0 && arr[st.top()]>=arr[i])
			  {
			  	while(st.size()> 0 && arr[st.top()]>=arr[i])
			  	   st.pop();
			
			   if(st.size()==0)
			      left.push_back(-1);
			    else
				  left.push_back(st.top());
				    
			  	
			 }       
		    	   
		 	st.push(i);
		 	
		 }
	
	return left;
	
}


int main()
 {
	int T;
	cin>>T;
	
    while(T--)
    {
        
        int N;
        cin>>N;
        
        long long int A[N];
        
        for(int i=0;i<N;i++)
        cin>>A[i];
        
        
        vector<int> right =nearest_smallest_right_index(A,N);
        
        vector<int> left =  Nearest_smallest_index_left(A,N);
        
       
    int width[N];
    
      for(int i=0;i<N;i++)
        width[i]=right[i]-left[i]-1;
    
 
    for(int i=0;i<N;i++)
    {
        A[i]=A[i]*width[i];
        
    }
 
   
 long long int maxarea=INT_MIN;
 
 for(int i=0;i<N;i++)
   {
       if(A[i]>maxarea)
        maxarea=A[i];
        
       
       
   }
 
 
 
 
 
 
         
         cout<<maxarea<<endl;
        
    }
   
    	
	return 0;
}
