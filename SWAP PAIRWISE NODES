/*

Given a linked list, swap every two adjacent nodes and return its head.

You may not modify the values in the list's nodes, only nodes itself may be changed.

 

Example:

Given 1->2->3->4, you should return the list as 2->1->4->3.

*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        
        
        if(head==NULL || head->next==NULL)
              return head;
        
        
        ListNode *new_start = head->next;
        
        ListNode *prev = head;
        
        ListNode *current = head->next;
        
        
        while(true)
        {
            ListNode *nextptr = current->next;
            current->next = prev;
            
            if(nextptr==NULL ||nextptr->next==NULL )
            {  prev->next = nextptr;
             
               break;
             }
           
           prev->next = nextptr->next;
           prev = nextptr;
           
           current = prev->next;
          
        }
       
      return new_start;  
    }
};
