

/*

Find median in a stream (HARD AT GFG)

Given an input stream of N integers. The task is to insert these numbers into a new stream and find the median of the stream formed by each insertion of X to the new stream.
Input:
The first line of input contains an integer N denoting the number of elements in the stream. Then the next N lines contains integer x denoting the number to be inserted into the stream.
Output:
For each element added to the stream print the floor of the new median in a new line.
 
Constraints:
1 <= N <= 106
1 <= x <= 106
 
Example:
Input:
4
5
15
1 
3
Output:
5
10
5
4
 
Explanation:
Testcase 1:
Flow in stream : 5, 15, 1, 3
5 goes to stream --> median 5 (5)
15 goes to stream --> median 10 (5, 15)
1 goes to stream --> median 5 (5, 15, 1)
3 goes to stream --> median 4 (5, 15, 1, 3) 




*/




#include<bits/stdc++.h>
using namespace std;
int main()
 {
	
	
	
	int N;
	
	cin>>N;
	
	priority_queue<int> maxheap;
	  priority_queue <int, vector<int>, greater<int> > minheap; 
	
	
	while(N--)
	{ 
	int x;
	cin>>x;
	
     if(maxheap.empty())
     {
          maxheap.push(x);
          cout<<maxheap.top()<<" ";

     }
     
else
{


    if(x>maxheap.top())
        minheap.push(x);
    else
	  maxheap.push(x); 
     
     ////////////// print starts
     
       if(maxheap.size()>minheap.size()+1)
         {
         	minheap.push(maxheap.top());
         	maxheap.pop();
        	
		 }
 
    if(minheap.size()>maxheap.size() + 1)
     {
     	maxheap.push(minheap.top());
     	minheap.pop();
     	
	 }
    
     if( maxheap.size() > minheap.size())
          cout<<maxheap.top();
      else if(maxheap.size()<minheap.size())
        cout<<minheap.top();
    else
       cout<<(maxheap.top() + minheap.top()  ) / 2;
       
    
}

	    
	    cout<<endl;
	    

	}
	

	
	return 0;
}
