
/*

Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false

Example 2:

Input: 1->2->2->1
Output: true

Follow up:
Could you do it in O(n) time and O(1) space?

*/



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
   ListNode* reverseList(ListNode *head)
   {
        ListNode *prev = NULL;
        ListNode *current = head;
        ListNode *nextptr;

        while(current!=NULL)
        {
            nextptr = current->next;
            current->next = prev;
            prev = current;
            current = nextptr;

        }

        head = prev;
        return head;  
 
    
}
   

    ListNode *slow=NULL;
    ListNode *temp=NULL;
    ListNode *fast=NULL;

    void getMiddle(ListNode *head)
    {

        fast = head;
        slow = head;
        temp =head;

        while(fast && fast->next)
        {
            temp =slow;
            slow = slow->next;
            fast = fast->next->next;

        }

    }
 
    
    bool isPalindrome(ListNode* head) {
        
                 if(head==NULL)
              return 1;

           slow =NULL;
           temp = NULL;
           fast = NULL;

          ListNode *head2=NULL;
           getMiddle(head);

         if(fast==NULL)
         {
             temp->next=NULL;
             head2=slow;
         }
         else
         {
             temp->next=NULL;
             head2=slow->next;


         }

          head2 = reverseList(head2);


         while(head2 && head)
          {

               if(head2->val!=head->val)
                return 0;
               head2=head2->next;
               head = head->next;

            }
        return 1;


    }
};
